version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws s3 rb s3://udapeople-<< parameters.id >> --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>


jobs:
  lint-files:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --update curl
      - run:
          name: install dependencies
          command: |
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            apk add --no-cache php8 php8-session
            # apk add --no-cache php7
            apk add composer
            composer require overtrue/phplint:^4.0 --dev -vvv
      - run:
          name: run lint
          command: |
            make lint 

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Test frontend
  #         command: | 
  #           cd frontend
  #           npm install
  #           npm run test
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Test backend
  #         command: | 
  #           cd backend
  #           npm install
  #           npm run test
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Test frontend
  #         command: | 
  #           cd frontend
  #           npm install
  #           npm audit --audit-level=critical
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Test backend
  #         command: | 
  #           cd backend
  #           npm install
  #           npm audit --audit-level=critical
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     -  checkout
  #     - run: yum install -y tar gzip
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=udapeople-backend \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=udapeople-frontend \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           aws ec2 describe-instances \
  #           --filters 'Name=tag:project,Values=udapeople-backend' --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text >> .circleci/ansible/inventory.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths: 
  #           - project/.circleci/ansible/inventory.txt

  #     - destroy-environment:
  #         id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - run: apk add --update curl
  #     - add_ssh_keys:
  #         fingerprints: ["b2:1e:84:aa:f1:b6:9e:44:25:ff:90:09:1f:16:ea:a1"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible 
  #           apk add --no-cache \
  #           python3 \
  #           py3-pip \
  #           && pip3 install --upgrade pip \
  #           && pip3 install --no-cache-dir \
  #               awscli \
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml
  #     - destroy-environment:
  #         id: "${CIRCLE_WORKFLOW_ID:0:7}"
      
  # run-migrations:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run: apk add --update curl
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible nodejs npm
  #           apk add --no-cache \
  #           python3 \
  #           py3-pip \
  #           && pip3 install --upgrade pip \
  #           && pip3 install --no-cache-dir \
  #               awscli \
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt   
  #     - run: cat ~/project/backend/migrations_dump.txt
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           echo  ${CIRCLE_WORKFLOW_ID:0:10}

  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             echo migration successful
  #             curl -H "Content-Type: text/plain" -H "token:76f9514c-4cdd-4658-88f9-d7a705af6604" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:10}
  #             echo migration successful
  #           else
  #              echo migration not successful
  #           fi
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build
  #     - destroy-environment:
  #         id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         id: "${CIRCLE_WORKFLOW_ID:0:10}"
      

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run: yum install -y tar gzip
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install python and awscli
  #         command: |
  #           curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
  #           yum -y install nodejs
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances --filters 'Name=tag:project,Values=udapeople-backend' --query "Reservations[*].Instances[*].PublicIpAddress" --output=text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:10}" --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/backendip_${CIRCLE_WORKFLOW_ID:0:10}
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build
  #     - destroy-environment:
  #         id: "${CIRCLE_WORKFLOW_ID:0:7}"
      

  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run: apk add --update curl
  #     - run: apk add tar gzip
  #     - add_ssh_keys:
  #         fingerprints: ["b2:1e:84:aa:f1:b6:9e:44:25:ff:90:09:1f:16:ea:a1"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible curl rsync openssh nodejs npm
  #           ansible --version
  #           pip install awscli
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           echo build successful
  #           echo ENVIRONMENT=production > "/root/project/backend/dist/.env"
  #           echo TYPEORM_CONNECTION=postgres >> "/root/project/backend/dist/.env"
  #           echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity{.ts,.js} >> "/root/project/backend/dist/.env"
  #           echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "/root/project/backend/dist/.env"
  #           echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "/root/project/backend/dist/.env"
  #           echo NODE_ENV=production >> "/root/project/backend/dist/.env"
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> "/root/project/backend/dist/.env"
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> "/root/project/backend/dist/.env"
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "/root/project/backend/dist/.env"
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "/root/project/backend/dist/.env"
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "/root/project/backend/dist/.env"
  #           cd ..
  #           # Zip the directory
  #           tar -C backend -czvf backend.tar.gz .
  #           mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
  #           mv backend.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
  #           pwd
  #     - run:
  #         name: Run ansible playbook
  #         command: |
  #           cd .circleci/ansible
  #           export ANSIBLE_HOST_KEY_CHECKING=False 
  #           export host_key_checking=False
  #           export record_host_keys=False
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build
  #     - destroy-environment:
  #         id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         id: "${CIRCLE_WORKFLOW_ID:0:10}"

  # smoke-test:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - run: apk add --update curl
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl nodejs npm
  #           pip install awscli
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query "Reservations[*].Instances[*].PublicIpAddress" \
  #             --output text)

  #           curl -s "http://${BACKEND_IP}:3030/api/status" | grep "ok"

  #           if curl -s "http://${BACKEND_IP}:3030/api/status" | grep "ok"
  #           then
  #               return 0
  #           else
  #               return 1
  #           fi

  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees" 

  #           echo ${URL} 

  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy-environment:
  #         id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         id: "${CIRCLE_WORKFLOW_ID:0:10}"

  # cloudfront-update:
  #   docker:
  #     - image: python:3.7-alpine3.11 
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl 
  #           pip install awscli
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation \
  #                   list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #                   --no-paginate --output text)

  #           echo "${OldWorkflowID}"
          
  #           curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --request PUT --data "${OldWorkflowID}" \
  #               https://api.memstash.io/values/udapeople_oldworkflow
              
           
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name InitialStack \
  #           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --tags project=udapeople

  #           echo "OldWorkFlowID: ${OldWorkflowID}"

  #           echo "currentWorkFlowID: ${CIRCLE_WORKFLOW_ID:0:7}"

  #     - destroy-environment:
  #         id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         id: "${CIRCLE_WORKFLOW_ID:0:10}"

  # cleanup:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - run: apk add --update curl
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update  curl rsync 
  #           pip install awscli
  #     - run:
  #           name: Fetch OldStack Workflow ID
  #           command: |
  #             # Fetch the Old workflow ID
  #             export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --request GET https://api.memstash.io/values/udapeople_oldworkflow)

  #             echo OldWorkflowID: "${OldWorkflowID}"
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
  #                 --request GET https://api.memstash.io/values/udapeople_oldworkflow)

  #           echo "${OldWorkflowID}"

  #           echo "${CIRCLE_WORKFLOW_ID:0:7}"

  #           export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                   --stack-status-filter CREATE_COMPLETE --no-paginate --output text)  

  #           echo " stack: ${STACKS}"     

  #           if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
  #             aws s3 rb s3://udapeople-"${OldWorkflowID}" --force
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi

  #     - destroy-environment:
  #         id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         id: "${CIRCLE_WORKFLOW_ID:0:10}"
         

workflows:
  esoft-portal-v1:
    jobs:
      - lint-files
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
